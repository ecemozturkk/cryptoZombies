{\rtf1\ansi\ansicpg1254\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red14\green12\blue17;\red202\green202\blue202;
\red212\green212\blue212;\red167\green197\blue152;\red194\green126\blue101;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c6667\c5098\c8627;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pragma\cf4 \strokec4  \cf2 \strokec2 solidity\cf4 \strokec4  \cf5 \strokec5 >=\cf6 \strokec6 0.5.0\cf4 \strokec4  \cf5 \strokec5 <\cf6 \strokec6 0.6.0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf7 \strokec7 "./ownable.sol"\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf7 \strokec7 "./safemath.sol"\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 contract\cf4 \strokec4  ZombieFactory \cf2 \strokec2 is\cf4 \strokec4  Ownable \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 using\cf4 \strokec4  SafeMath \cf2 \strokec2 for\cf4 \strokec4  \cf2 \strokec2 uint256\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 using\cf4 \strokec4  SafeMath32 \cf2 \strokec2 for\cf4 \strokec4  \cf2 \strokec2 uint32\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 using\cf4 \strokec4  SafeMath16 \cf2 \strokec2 for\cf4 \strokec4  \cf2 \strokec2 uint16\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 event\cf4 \strokec4  NewZombie\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  zombieId\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 string\cf4 \strokec4  name\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint\cf4 \strokec4  dna\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 uint\cf4 \strokec4  dnaDigits \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 16\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 uint\cf4 \strokec4  dnaModulus \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 10\cf4 \strokec4  ** dnaDigits\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 uint\cf4 \strokec4  cooldownTime \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 1\cf4 \strokec4  days\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 struct\cf4 \strokec4  Zombie \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 string\cf4 \strokec4  name\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint\cf4 \strokec4  dna\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint32\cf4 \strokec4  level\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint32\cf4 \strokec4  readyTime\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint16\cf4 \strokec4  winCount\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint16\cf4 \strokec4  lossCount\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   Zombie\cf5 \strokec5 []\cf4 \strokec4  \cf2 \strokec2 public\cf4 \strokec4  zombies\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 mapping\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  => \cf2 \strokec2 address\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 public\cf4 \strokec4  zombieToOwner\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 mapping\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 address\cf4 \strokec4  => \cf2 \strokec2 uint\cf5 \strokec5 )\cf4 \strokec4  ownerZombieCount\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  _createZombie\cf5 \strokec5 (\cf2 \strokec2 string\cf4 \strokec4  memory _name\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint\cf4 \strokec4  _dna\cf5 \strokec5 )\cf4 \strokec4  internal \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint\cf4 \strokec4  id \cf5 \strokec5 =\cf4 \strokec4  zombies\cf5 \strokec5 .\cf4 \strokec4 push\cf5 \strokec5 (\cf4 \strokec4 Zombie\cf5 \strokec5 (\cf4 \strokec4 _name\cf5 \strokec5 ,\cf4 \strokec4  _dna\cf5 \strokec5 ,\cf4 \strokec4  \cf6 \strokec6 1\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint32\cf5 \strokec5 (\cf4 \strokec4 now \cf5 \strokec5 +\cf4 \strokec4  cooldownTime\cf5 \strokec5 ),\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ,\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ))\cf4 \strokec4  \cf5 \strokec5 -\cf4 \strokec4  \cf6 \strokec6 1\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     zombieToOwner\cf5 \strokec5 [\cf4 \strokec4 id\cf5 \strokec5 ]\cf4 \strokec4  \cf5 \strokec5 =\cf4 \strokec4  msg\cf5 \strokec5 .\cf4 \strokec4 sender\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     ownerZombieCount\cf5 \strokec5 [\cf4 \strokec4 msg\cf5 \strokec5 .\cf4 \strokec4 sender\cf5 \strokec5 ]\cf4 \strokec4  \cf5 \strokec5 =\cf4 \strokec4  ownerZombieCount\cf5 \strokec5 [\cf4 \strokec4 msg\cf5 \strokec5 .\cf4 \strokec4 sender\cf5 \strokec5 ].\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     emit NewZombie\cf5 \strokec5 (\cf4 \strokec4 id\cf5 \strokec5 ,\cf4 \strokec4  _name\cf5 \strokec5 ,\cf4 \strokec4  _dna\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  _generateRandomDna\cf5 \strokec5 (\cf2 \strokec2 string\cf4 \strokec4  memory _str\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 private\cf4 \strokec4  view \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint\cf4 \strokec4  rand \cf5 \strokec5 =\cf4 \strokec4  \cf2 \strokec2 uint\cf5 \strokec5 (\cf4 \strokec4 keccak256\cf5 \strokec5 (\cf4 \strokec4 abi\cf5 \strokec5 .\cf4 \strokec4 encodePacked\cf5 \strokec5 (\cf4 \strokec4 _str\cf5 \strokec5 )));\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  rand \cf5 \strokec5 %\cf4 \strokec4  dnaModulus\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  createRandomZombie\cf5 \strokec5 (\cf2 \strokec2 string\cf4 \strokec4  memory _name\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 public\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     require\cf5 \strokec5 (\cf4 \strokec4 ownerZombieCount\cf5 \strokec5 [\cf4 \strokec4 msg\cf5 \strokec5 .\cf4 \strokec4 sender\cf5 \strokec5 ]\cf4 \strokec4  \cf5 \strokec5 ==\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint\cf4 \strokec4  randDna \cf5 \strokec5 =\cf4 \strokec4  _generateRandomDna\cf5 \strokec5 (\cf4 \strokec4 _name\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     randDna \cf5 \strokec5 =\cf4 \strokec4  randDna \cf5 \strokec5 -\cf4 \strokec4  randDna \cf5 \strokec5 %\cf4 \strokec4  \cf6 \strokec6 100\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     _createZombie\cf5 \strokec5 (\cf4 \strokec4 _name\cf5 \strokec5 ,\cf4 \strokec4  randDna\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 \}\cf4 \cb1 \strokec4 \
\
}