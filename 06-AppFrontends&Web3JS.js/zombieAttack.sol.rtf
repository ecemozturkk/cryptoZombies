{\rtf1\ansi\ansicpg1254\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red14\green12\blue17;\red202\green202\blue202;
\red212\green212\blue212;\red167\green197\blue152;\red194\green126\blue101;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c6667\c5098\c8627;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pragma\cf4 \strokec4  \cf2 \strokec2 solidity\cf4 \strokec4  \cf5 \strokec5 >=\cf6 \strokec6 0.5.0\cf4 \strokec4  \cf5 \strokec5 <\cf6 \strokec6 0.6.0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf7 \strokec7 "./zombiehelper.sol"\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 contract\cf4 \strokec4  ZombieAttack \cf2 \strokec2 is\cf4 \strokec4  ZombieHelper \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 uint\cf4 \strokec4  randNonce \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 uint\cf4 \strokec4  attackVictoryProbability \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 70\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  randMod\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  _modulus\cf5 \strokec5 )\cf4 \strokec4  internal \cf2 \strokec2 returns\cf5 \strokec5 (\cf2 \strokec2 uint\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     randNonce \cf5 \strokec5 =\cf4 \strokec4  randNonce\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 uint\cf5 \strokec5 (\cf4 \strokec4 keccak256\cf5 \strokec5 (\cf4 \strokec4 abi\cf5 \strokec5 .\cf4 \strokec4 encodePacked\cf5 \strokec5 (\cf4 \strokec4 now\cf5 \strokec5 ,\cf4 \strokec4  msg\cf5 \strokec5 .\cf4 \strokec4 sender\cf5 \strokec5 ,\cf4 \strokec4  randNonce\cf5 \strokec5 )))\cf4 \strokec4  \cf5 \strokec5 %\cf4 \strokec4  _modulus\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  attack\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  _zombieId\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint\cf4 \strokec4  _targetId\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 external\cf4 \strokec4  onlyOwnerOf\cf5 \strokec5 (\cf4 \strokec4 _zombieId\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     Zombie storage myZombie \cf5 \strokec5 =\cf4 \strokec4  zombies\cf5 \strokec5 [\cf4 \strokec4 _zombieId\cf5 \strokec5 ];\cf4 \cb1 \strokec4 \
\cb3     Zombie storage enemyZombie \cf5 \strokec5 =\cf4 \strokec4  zombies\cf5 \strokec5 [\cf4 \strokec4 _targetId\cf5 \strokec5 ];\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint\cf4 \strokec4  rand \cf5 \strokec5 =\cf4 \strokec4  randMod\cf5 \strokec5 (\cf6 \strokec6 100\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 rand \cf5 \strokec5 <=\cf4 \strokec4  attackVictoryProbability\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3       myZombie\cf5 \strokec5 .\cf4 \strokec4 winCount \cf5 \strokec5 =\cf4 \strokec4  myZombie\cf5 \strokec5 .\cf4 \strokec4 winCount\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3       myZombie\cf5 \strokec5 .\cf4 \strokec4 level \cf5 \strokec5 =\cf4 \strokec4  myZombie\cf5 \strokec5 .\cf4 \strokec4 level\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3       enemyZombie\cf5 \strokec5 .\cf4 \strokec4 lossCount \cf5 \strokec5 =\cf4 \strokec4  enemyZombie\cf5 \strokec5 .\cf4 \strokec4 lossCount\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3       feedAndMultiply\cf5 \strokec5 (\cf4 \strokec4 _zombieId\cf5 \strokec5 ,\cf4 \strokec4  enemyZombie\cf5 \strokec5 .\cf4 \strokec4 dna\cf5 \strokec5 ,\cf4 \strokec4  \cf7 \strokec7 "zombie"\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 \}\cf4 \strokec4  \cf2 \strokec2 else\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3       myZombie\cf5 \strokec5 .\cf4 \strokec4 lossCount \cf5 \strokec5 =\cf4 \strokec4  myZombie\cf5 \strokec5 .\cf4 \strokec4 lossCount\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3       enemyZombie\cf5 \strokec5 .\cf4 \strokec4 winCount \cf5 \strokec5 =\cf4 \strokec4  enemyZombie\cf5 \strokec5 .\cf4 \strokec4 winCount\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3       _triggerCooldown\cf5 \strokec5 (\cf4 \strokec4 myZombie\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 \}\cf4 \cb1 \strokec4 \
\
}