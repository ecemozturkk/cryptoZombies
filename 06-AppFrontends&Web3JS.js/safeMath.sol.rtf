{\rtf1\ansi\ansicpg1254\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red14\green12\blue17;\red202\green202\blue202;
\red212\green212\blue212;\red167\green197\blue152;\red79\green123\blue61;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c6667\c5098\c8627;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c37647\c54510\c30588;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pragma\cf4 \strokec4  \cf2 \strokec2 solidity\cf4 \strokec4  \cf5 \strokec5 >=\cf6 \strokec6 0.5.0\cf4 \strokec4  \cf5 \strokec5 <\cf6 \strokec6 0.6.0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 /**\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @title SafeMath\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @dev Math operations with safety checks that throw on error\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 library\cf4 \strokec4  SafeMath \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7   * @dev Multiplies two numbers, throws on overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  mul\cf5 \strokec5 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint256\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 a \cf5 \strokec5 ==\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint256\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 *\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 c \cf5 \strokec5 /\cf4 \strokec4  a \cf5 \strokec5 ==\cf4 \strokec4  b\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7   * @dev Integer division of two numbers, truncating the quotient.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  div\cf5 \strokec5 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint256\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // assert(b > 0); // Solidity automatically throws when dividing by 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint256\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 /\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // assert(a == b * c + a % b); // There is no case in which this doesn't hold\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  sub\cf5 \strokec5 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint256\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 b \cf5 \strokec5 <=\cf4 \strokec4  a\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  a \cf5 \strokec5 -\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7   * @dev Adds two numbers, throws on overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  add\cf5 \strokec5 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint256\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint256\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 +\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 c \cf5 \strokec5 >=\cf4 \strokec4  a\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 /**\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @title SafeMath32\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @dev SafeMath library implemented for uint32\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 library\cf4 \strokec4  SafeMath32 \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  mul\cf5 \strokec5 (\cf2 \strokec2 uint32\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint32\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint32\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 a \cf5 \strokec5 ==\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint32\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 *\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 c \cf5 \strokec5 /\cf4 \strokec4  a \cf5 \strokec5 ==\cf4 \strokec4  b\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  div\cf5 \strokec5 (\cf2 \strokec2 uint32\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint32\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint32\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // assert(b > 0); // Solidity automatically throws when dividing by 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint32\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 /\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // assert(a == b * c + a % b); // There is no case in which this doesn't hold\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  sub\cf5 \strokec5 (\cf2 \strokec2 uint32\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint32\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint32\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 b \cf5 \strokec5 <=\cf4 \strokec4  a\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  a \cf5 \strokec5 -\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  add\cf5 \strokec5 (\cf2 \strokec2 uint32\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint32\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint32\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint32\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 +\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 c \cf5 \strokec5 >=\cf4 \strokec4  a\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 /**\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @title SafeMath16\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @dev SafeMath library implemented for uint16\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 library\cf4 \strokec4  SafeMath16 \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  mul\cf5 \strokec5 (\cf2 \strokec2 uint16\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint16\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint16\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 a \cf5 \strokec5 ==\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint16\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 *\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 c \cf5 \strokec5 /\cf4 \strokec4  a \cf5 \strokec5 ==\cf4 \strokec4  b\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  div\cf5 \strokec5 (\cf2 \strokec2 uint16\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint16\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint16\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // assert(b > 0); // Solidity automatically throws when dividing by 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint16\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 /\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // assert(a == b * c + a % b); // There is no case in which this doesn't hold\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  sub\cf5 \strokec5 (\cf2 \strokec2 uint16\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint16\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint16\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 b \cf5 \strokec5 <=\cf4 \strokec4  a\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  a \cf5 \strokec5 -\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  add\cf5 \strokec5 (\cf2 \strokec2 uint16\cf4 \strokec4  a\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint16\cf4 \strokec4  b\cf5 \strokec5 )\cf4 \strokec4  internal pure \cf2 \strokec2 returns\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint16\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint16\cf4 \strokec4  c \cf5 \strokec5 =\cf4 \strokec4  a \cf5 \strokec5 +\cf4 \strokec4  b\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     assert\cf5 \strokec5 (\cf4 \strokec4 c \cf5 \strokec5 >=\cf4 \strokec4  a\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  c\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 \}\cf4 \cb1 \strokec4 \
\
}