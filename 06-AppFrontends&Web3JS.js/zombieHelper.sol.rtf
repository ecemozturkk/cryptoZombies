{\rtf1\ansi\ansicpg1254\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red14\green12\blue17;\red202\green202\blue202;
\red212\green212\blue212;\red167\green197\blue152;\red194\green126\blue101;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c6667\c5098\c8627;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pragma\cf4 \strokec4  \cf2 \strokec2 solidity\cf4 \strokec4  \cf5 \strokec5 >=\cf6 \strokec6 0.5.0\cf4 \strokec4  \cf5 \strokec5 <\cf6 \strokec6 0.6.0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf7 \strokec7 "./zombiefeeding.sol"\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 contract\cf4 \strokec4  ZombieHelper \cf2 \strokec2 is\cf4 \strokec4  ZombieFeeding \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 uint\cf4 \strokec4  levelUpFee \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 0.001\cf4 \strokec4  ether\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 modifier\cf4 \strokec4  aboveLevel\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  _level\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint\cf4 \strokec4  _zombieId\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     require\cf5 \strokec5 (\cf4 \strokec4 zombies\cf5 \strokec5 [\cf4 \strokec4 _zombieId\cf5 \strokec5 ].\cf4 \strokec4 level \cf5 \strokec5 >=\cf4 \strokec4  _level\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     _\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  withdraw\cf5 \strokec5 ()\cf4 \strokec4  \cf2 \strokec2 external\cf4 \strokec4  onlyOwner \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 address\cf4 \strokec4  _owner \cf5 \strokec5 =\cf4 \strokec4  owner\cf5 \strokec5 ();\cf4 \cb1 \strokec4 \
\cb3     _owner\cf5 \strokec5 .\cf4 \strokec4 transfer\cf5 \strokec5 (\cf2 \strokec2 address\cf5 \strokec5 (\cf2 \strokec2 this\cf5 \strokec5 ).\cf4 \strokec4 balance\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  setLevelUpFee\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  _fee\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 external\cf4 \strokec4  onlyOwner \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     levelUpFee \cf5 \strokec5 =\cf4 \strokec4  _fee\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  levelUp\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  _zombieId\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 external\cf4 \strokec4  \cf2 \strokec2 payable\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     require\cf5 \strokec5 (\cf4 \strokec4 msg\cf5 \strokec5 .\cf4 \strokec4 value \cf5 \strokec5 ==\cf4 \strokec4  levelUpFee\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3     zombies\cf5 \strokec5 [\cf4 \strokec4 _zombieId\cf5 \strokec5 ].\cf4 \strokec4 level \cf5 \strokec5 =\cf4 \strokec4  zombies\cf5 \strokec5 [\cf4 \strokec4 _zombieId\cf5 \strokec5 ].\cf4 \strokec4 level\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf6 \strokec6 1\cf5 \strokec5 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  changeName\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  _zombieId\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 string\cf4 \strokec4  calldata _newName\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 external\cf4 \strokec4  aboveLevel\cf5 \strokec5 (\cf6 \strokec6 2\cf5 \strokec5 ,\cf4 \strokec4  _zombieId\cf5 \strokec5 )\cf4 \strokec4  onlyOwnerOf\cf5 \strokec5 (\cf4 \strokec4 _zombieId\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     zombies\cf5 \strokec5 [\cf4 \strokec4 _zombieId\cf5 \strokec5 ].\cf4 \strokec4 name \cf5 \strokec5 =\cf4 \strokec4  _newName\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  changeDna\cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  _zombieId\cf5 \strokec5 ,\cf4 \strokec4  \cf2 \strokec2 uint\cf4 \strokec4  _newDna\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 external\cf4 \strokec4  aboveLevel\cf5 \strokec5 (\cf6 \strokec6 20\cf5 \strokec5 ,\cf4 \strokec4  _zombieId\cf5 \strokec5 )\cf4 \strokec4  onlyOwnerOf\cf5 \strokec5 (\cf4 \strokec4 _zombieId\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     zombies\cf5 \strokec5 [\cf4 \strokec4 _zombieId\cf5 \strokec5 ].\cf4 \strokec4 dna \cf5 \strokec5 =\cf4 \strokec4  _newDna\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  getZombiesByOwner\cf5 \strokec5 (\cf2 \strokec2 address\cf4 \strokec4  _owner\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 external\cf4 \strokec4  view \cf2 \strokec2 returns\cf5 \strokec5 (\cf2 \strokec2 uint\cf5 \strokec5 []\cf4 \strokec4  memory\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint\cf5 \strokec5 []\cf4 \strokec4  memory result \cf5 \strokec5 =\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  \cf2 \strokec2 uint\cf5 \strokec5 [](\cf4 \strokec4 ownerZombieCount\cf5 \strokec5 [\cf4 \strokec4 _owner\cf5 \strokec5 ]);\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint\cf4 \strokec4  counter \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf5 \strokec5 (\cf2 \strokec2 uint\cf4 \strokec4  i \cf5 \strokec5 =\cf4 \strokec4  \cf6 \strokec6 0\cf5 \strokec5 ;\cf4 \strokec4  i \cf5 \strokec5 <\cf4 \strokec4  zombies\cf5 \strokec5 .\cf4 \strokec4 length\cf5 \strokec5 ;\cf4 \strokec4  i\cf5 \strokec5 ++)\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 zombieToOwner\cf5 \strokec5 [\cf4 \strokec4 i\cf5 \strokec5 ]\cf4 \strokec4  \cf5 \strokec5 ==\cf4 \strokec4  _owner\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \cb1 \strokec4 \
\cb3         result\cf5 \strokec5 [\cf4 \strokec4 counter\cf5 \strokec5 ]\cf4 \strokec4  \cf5 \strokec5 =\cf4 \strokec4  i\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3         counter\cf5 \strokec5 ++;\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  result\cf5 \strokec5 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 \}\cf4 \cb1 \strokec4 \
\
}